{"version":3,"sources":["index.js","hyperapp-jsx.js","../assets/title.txt","views/main.js","views/intro.js","utils/index.js","components/index.js","views/map.js","views/connection.js","views/battle.js","views/index.js","../assets/level1.txt","../assets/level2.txt","../assets/level3.txt","levels.js","../assets/moves.txt","moves.js"],"names":["EMPTY_OBJ","EMPTY_ARR","id","a","map","isArray","Array","enqueue","requestAnimationFrame","setTimeout","createClass","obj","out","tmp","k","length","shouldRestart","b","getKey","vdom","key","patchProperty","node","oldValue","newValue","listener","isSvg","setProperty","tag","slice","addEventListener","removeEventListener","removeAttribute","setAttribute","createNode","props","document","createTextNode","type","createElementNS","is","createElement","i","children","appendChild","maybeVNode","patch","parent","oldVNode","newVNode","nodeValue","insertBefore","removeChild","tmpVKid","oldVKid","oldKey","newKey","oldProps","newProps","oldVKids","newVKids","oldHead","newHead","oldTail","newTail","keyed","newKeyed","memo","text","recycleNode","nodeType","createVNode","nodeName","toLowerCase","call","childNodes","value","h","app","doing","state","view","subscriptions","subs","setState","newState","oldSubs","newSubs","dispatch","oldSub","newSub","push","render","middleware","action","fx","event","this","parentNode","init","concat","any","module","exports","Main","titleTxt","Intro","AdvanceStep","finalStep","step","intro","Math","min","steps","opacity","animationDelay","deepClone","JSON","parse","stringify","updateArray","array","index","updater","isUnitHeadAtLocation","unit","row","col","tiles","isUnitAtLocation","some","tile","findUnitAtLocation","units","location","find","findUnitIndexAtLocation","findIndex","isLocationInBounds","getNeighborLocations","filter","neighbor","getNeighbors","getLocationsInArea","magnitude","locations","m","inAreaLocation","getLocationsInDiamond","depth","layerWidth","getLocationsInSquare","rowAdjust","colAdjust","findAllIndices","comparator","indices","indexes","manhattanDistance","abs","pickRandomlyFromArray","floor","random","getAllLocations","forEach","rowIndex","colIndex","TILE_SIZE","Sprite","sheet","icon","color","bg","scale","onclick","selected","moveTarget","attackTarget","neighbors","animation","onanimationend","width","height","backgroundColor","borderTop","borderBottom","borderRight","borderLeft","undefined","transform","transformOrigin","webkitMaskImage","webkitMaskPosition","position","Server","label","statusCode","Grid","onTileClick","onAnimationEnd","display","gridTemplateColumns","repeat","gridTemplateRows","removedTiles","removed","movedTiles","moved","Map","StartConnection","connection","serverIndex","servers","server","tileSheet","name","Connection","StartBattle","battle","Battle","SelectAbility","selectedAction","DeselectAbility","ClickAbility","SelectUnit","DeselectUnit","isLocationValidMoveTarget","neighborUnitHead","moves","isLocationValidAttackTarget","selectedUnit","ability","abilities","inRangeLocations","area","includes","range","parseInt","match","inRangeLocation","MoveUnit","selectedUnitIndex","size","pop","UseAbility","ap","targetUnitIndex","apUpdatedState","damagedEnemyUnit","power","ClickTile","deselectedAbilityState","owner","FinishAnimation","unitIndex","isLocationRemoved","removedLocationIndex","EndTurn","every","isNotActedEnemyUnit","target","acted","moveOptions","playerUnitTiles","reduce","allTiles","unitTiles","smallestDistance","Infinity","bestMoveOption","moveOption","findNearestOption","options","bestOption","option","distance","optionDistanceFromPlayer","attackOptions","turn","UnitInfo","header","HR","selectedInfo","unitHead","unitPiece","views","main","level","lines","split","char","level3","level1","level2","movesData","line","onDomEvent","eventType","subFn","onEventFn","onClick","onKeyDown","Click","App","rest","console","log","CurrentView","levels","getElementById"],"mappings":"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","file":"src.f4cb3885.js","sourceRoot":"../src","sourcesContent":["var SSR_NODE = 1\nvar TEXT_NODE = 3\nvar EMPTY_OBJ = {}\nvar EMPTY_ARR = []\nvar SVG_NS = \"http://www.w3.org/2000/svg\"\n\nvar id = (a) => a\nvar map = EMPTY_ARR.map\nvar isArray = Array.isArray\nvar enqueue =\n  typeof requestAnimationFrame !== \"undefined\"\n    ? requestAnimationFrame\n    : setTimeout\n\nvar createClass = (obj) => {\n  var out = \"\"\n\n  if (typeof obj === \"string\") return obj\n\n  if (isArray(obj)) {\n    for (var k = 0, tmp; k < obj.length; k++) {\n      if ((tmp = createClass(obj[k]))) {\n        out += (out && \" \") + tmp\n      }\n    }\n  } else {\n    for (var k in obj) {\n      if (obj[k]) out += (out && \" \") + k\n    }\n  }\n\n  return out\n}\n\nvar shouldRestart = (a, b) => {\n  for (var k in { ...a, ...b }) {\n    if (typeof (isArray((b[k] = a[k])) ? b[k][0] : b[k]) === \"function\") {\n    } else if (a[k] !== b[k]) return true\n  }\n}\n\nvar patchSubs = (oldSubs, newSubs, dispatch) => {\n  for (\n    var subs = [], i = 0, oldSub, newSub;\n    i < oldSubs.length || i < newSubs.length;\n    i++\n  ) {\n    oldSub = oldSubs[i]\n    newSub = newSubs[i]\n\n    subs.push(\n      newSub && newSub !== true\n        ? !oldSub ||\n          newSub[0] !== oldSub[0] ||\n          shouldRestart(newSub[1], oldSub[1])\n          ? [\n              newSub[0],\n              newSub[1],\n              newSub[0](dispatch, newSub[1]),\n              oldSub && oldSub[2](),\n            ]\n          : oldSub\n        : oldSub && oldSub[2]()\n    )\n  }\n  return subs\n}\n\nvar getKey = (vdom) => (vdom == null ? vdom : vdom.key)\n\nvar patchProperty = (node, key, oldValue, newValue, listener, isSvg) => {\n  if (key === \"key\") {\n  } else if (key === \"style\") {\n    for (var k in { ...oldValue, ...newValue }) {\n      oldValue = newValue == null || newValue[k] == null ? \"\" : newValue[k]\n      if (k[0] === \"-\") {\n        node[key].setProperty(k, oldValue)\n      } else {\n        node[key][k] = oldValue\n      }\n    }\n  } else if (key[0] === \"o\" && key[1] === \"n\") {\n    if (!((node.tag || (node.tag = {}))[(key = key.slice(2))] = newValue)) {\n      node.removeEventListener(key, listener)\n    } else if (!oldValue) {\n      node.addEventListener(key, listener)\n    }\n  } else if (!isSvg && key !== \"list\" && key !== \"form\" && key in node) {\n    node[key] = newValue == null ? \"\" : newValue\n  } else if (\n    newValue == null ||\n    newValue === false ||\n    (key === \"class\" && !(newValue = createClass(newValue)))\n  ) {\n    node.removeAttribute(key)\n  } else {\n    node.setAttribute(key, newValue)\n  }\n}\n\nvar createNode = (vdom, listener, isSvg) => {\n  var props = vdom.props\n  var node =\n    vdom.tag === TEXT_NODE\n      ? document.createTextNode(vdom.type)\n      : (isSvg = isSvg || vdom.type === \"svg\")\n      ? document.createElementNS(SVG_NS, vdom.type, { is: props.is })\n      : document.createElement(vdom.type, { is: props.is })\n\n  for (var k in props) {\n    patchProperty(node, k, null, props[k], listener, isSvg)\n  }\n\n  for (var i = 0; i < vdom.children.length; i++) {\n    node.appendChild(\n      createNode(\n        (vdom.children[i] = maybeVNode(vdom.children[i])),\n        listener,\n        isSvg\n      )\n    )\n  }\n\n  return (vdom.node = node)\n}\n\nvar patch = (parent, node, oldVNode, newVNode, listener, isSvg) => {\n  if (oldVNode === newVNode) {\n  } else if (\n    oldVNode != null &&\n    oldVNode.tag === TEXT_NODE &&\n    newVNode.tag === TEXT_NODE\n  ) {\n    if (oldVNode.type !== newVNode.type) node.nodeValue = newVNode.type\n  } else if (oldVNode == null || oldVNode.type !== newVNode.type) {\n    node = parent.insertBefore(\n      createNode((newVNode = maybeVNode(newVNode)), listener, isSvg),\n      node\n    )\n    if (oldVNode != null) {\n      parent.removeChild(oldVNode.node)\n    }\n  } else {\n    var tmpVKid\n    var oldVKid\n\n    var oldKey\n    var newKey\n\n    var oldProps = oldVNode.props\n    var newProps = newVNode.props\n\n    var oldVKids = oldVNode.children\n    var newVKids = newVNode.children\n\n    var oldHead = 0\n    var newHead = 0\n    var oldTail = oldVKids.length - 1\n    var newTail = newVKids.length - 1\n\n    isSvg = isSvg || newVNode.type === \"svg\"\n\n    for (var i in { ...oldProps, ...newProps }) {\n      if (\n        (i === \"value\" || i === \"selected\" || i === \"checked\"\n          ? node[i]\n          : oldProps[i]) !== newProps[i]\n      ) {\n        patchProperty(node, i, oldProps[i], newProps[i], listener, isSvg)\n      }\n    }\n\n    while (newHead <= newTail && oldHead <= oldTail) {\n      if (\n        (oldKey = getKey(oldVKids[oldHead])) == null ||\n        oldKey !== getKey(newVKids[newHead])\n      ) {\n        break\n      }\n\n      patch(\n        node,\n        oldVKids[oldHead].node,\n        oldVKids[oldHead],\n        (newVKids[newHead] = maybeVNode(\n          newVKids[newHead++],\n          oldVKids[oldHead++]\n        )),\n        listener,\n        isSvg\n      )\n    }\n\n    while (newHead <= newTail && oldHead <= oldTail) {\n      if (\n        (oldKey = getKey(oldVKids[oldTail])) == null ||\n        oldKey !== getKey(newVKids[newTail])\n      ) {\n        break\n      }\n\n      patch(\n        node,\n        oldVKids[oldTail].node,\n        oldVKids[oldTail],\n        (newVKids[newTail] = maybeVNode(\n          newVKids[newTail--],\n          oldVKids[oldTail--]\n        )),\n        listener,\n        isSvg\n      )\n    }\n\n    if (oldHead > oldTail) {\n      while (newHead <= newTail) {\n        node.insertBefore(\n          createNode(\n            (newVKids[newHead] = maybeVNode(newVKids[newHead++])),\n            listener,\n            isSvg\n          ),\n          (oldVKid = oldVKids[oldHead]) && oldVKid.node\n        )\n      }\n    } else if (newHead > newTail) {\n      while (oldHead <= oldTail) {\n        node.removeChild(oldVKids[oldHead++].node)\n      }\n    } else {\n      for (var keyed = {}, newKeyed = {}, i = oldHead; i <= oldTail; i++) {\n        if ((oldKey = oldVKids[i].key) != null) {\n          keyed[oldKey] = oldVKids[i]\n        }\n      }\n\n      while (newHead <= newTail) {\n        oldKey = getKey((oldVKid = oldVKids[oldHead]))\n        newKey = getKey(\n          (newVKids[newHead] = maybeVNode(newVKids[newHead], oldVKid))\n        )\n\n        if (\n          newKeyed[oldKey] ||\n          (newKey != null && newKey === getKey(oldVKids[oldHead + 1]))\n        ) {\n          if (oldKey == null) {\n            node.removeChild(oldVKid.node)\n          }\n          oldHead++\n          continue\n        }\n\n        if (newKey == null || oldVNode.tag === SSR_NODE) {\n          if (oldKey == null) {\n            patch(\n              node,\n              oldVKid && oldVKid.node,\n              oldVKid,\n              newVKids[newHead],\n              listener,\n              isSvg\n            )\n            newHead++\n          }\n          oldHead++\n        } else {\n          if (oldKey === newKey) {\n            patch(\n              node,\n              oldVKid.node,\n              oldVKid,\n              newVKids[newHead],\n              listener,\n              isSvg\n            )\n            newKeyed[newKey] = true\n            oldHead++\n          } else {\n            if ((tmpVKid = keyed[newKey]) != null) {\n              patch(\n                node,\n                node.insertBefore(tmpVKid.node, oldVKid && oldVKid.node),\n                tmpVKid,\n                newVKids[newHead],\n                listener,\n                isSvg\n              )\n              newKeyed[newKey] = true\n            } else {\n              patch(\n                node,\n                oldVKid && oldVKid.node,\n                null,\n                newVKids[newHead],\n                listener,\n                isSvg\n              )\n            }\n          }\n          newHead++\n        }\n      }\n\n      while (oldHead <= oldTail) {\n        if (getKey((oldVKid = oldVKids[oldHead++])) == null) {\n          node.removeChild(oldVKid.node)\n        }\n      }\n\n      for (var i in keyed) {\n        if (newKeyed[i] == null) {\n          node.removeChild(keyed[i].node)\n        }\n      }\n    }\n  }\n\n  return (newVNode.node = node)\n}\n\nvar propsChanged = (a, b) => {\n  for (var k in a) if (a[k] !== b[k]) return true\n  for (var k in b) if (a[k] !== b[k]) return true\n}\n\nvar maybeVNode = (newVNode, oldVNode) =>\n  newVNode !== true && newVNode !== false && newVNode\n    ? typeof newVNode.tag === \"function\"\n      ? ((!oldVNode ||\n          oldVNode.memo == null ||\n          propsChanged(oldVNode.memo, newVNode.memo)) &&\n          ((oldVNode = newVNode.tag(newVNode.memo)).memo = newVNode.memo),\n        oldVNode)\n      : newVNode\n    : text(\"\")\n\nvar recycleNode = (node) =>\n  node.nodeType === TEXT_NODE\n    ? text(node.nodeValue, node)\n    : createVNode(\n        node.nodeName.toLowerCase(),\n        EMPTY_OBJ,\n        map.call(node.childNodes, recycleNode),\n        node,\n        null,\n        SSR_NODE\n      )\n\nvar createVNode = (type, props, children, node, key, tag) => ({\n  type,\n  props,\n  children,\n  node,\n  key,\n  tag,\n})\n\nexport var memo = (tag, memo) => ({ tag, memo })\n\nexport var text = (value, node) =>\n  createVNode(value, EMPTY_OBJ, EMPTY_ARR, node, null, TEXT_NODE)\n\nexport var h = (type, props, children) =>\n  createVNode(\n    type,\n    props,\n    isArray(children) ? children : children == null ? EMPTY_ARR : [children],\n    null,\n    props.key\n  )\n\nexport var app = (props) => {\n  var view = props.view\n  var node = props.node\n  var subscriptions = props.subscriptions\n  var vdom = node && recycleNode(node)\n  var subs = []\n  var doing\n  var state\n\n  var setState = (newState) => {\n    if (state !== newState) {\n      state = newState\n      if (subscriptions) {\n        subs = patchSubs(subs, subscriptions(state), dispatch)\n      }\n      if (view && !doing) enqueue(render, (doing = true))\n    }\n  }\n\n  var dispatch = (props.middleware || id)((action, props) =>\n    typeof action === \"function\"\n      ? dispatch(action(state, props))\n      : isArray(action)\n      ? typeof action[0] === \"function\"\n        ? dispatch(action[0], action[1])\n        : action\n            .slice(1)\n            .map(\n              (fx) => fx && fx !== true && fx[0](dispatch, fx[1]),\n              setState(action[0])\n            )\n      : setState(action)\n  )\n\n  var listener = function (event) {\n    dispatch(this.tag[event.type], event)\n  }\n\n  var render = () =>\n    (node = patch(\n      node.parentNode,\n      node,\n      vdom,\n      (vdom = view(state)),\n      listener,\n      (doing = false)\n    ))\n\n  dispatch(props.init)\n}\n","import { h, text } from \"hyperapp\";\n\nexport default (type, props, ...children) =>\n  typeof type === \"function\"\n    ? type(props, children)\n    : h(\n        type,\n        props || {},\n        []\n          .concat(...children)\n          .map((any) =>\n            typeof any === \"string\" || typeof any === \"number\" ? text(any) : any\n          )\n      );\n","module.exports = ` ____  _        _                ____          _      \n/ ___|| |_ __ _| |_ _   _ ___   / ___|___   __| | ___\n\\\\___ \\\\| __/ _\\` | __| | | / __| | |   / _ \\\\ / _\\` |/ _ \\\\ \n ___) | || (_| | |_| |_| \\\\__ \\\\ | |__| (_) | (_| |  __/\n|____/ \\\\__\\\\__,_|\\\\__|\\\\__,_|___/  \\\\____\\\\___/ \\\\__,_|\\\\___|`","import h from \"../hyperapp-jsx\";\n\nimport titleTxt from \"../../assets/title.txt\";\n\nconst Main = () => {\n  return (\n    <main>\n      <pre>{titleTxt}</pre>\n      <p>\n        Press any key to continue...{\" \"}\n        <span class=\"flash animated infinite\">|</span>\n      </p>\n    </main>\n  );\n};\n\nexport default Main;\n","import h from \"../hyperapp-jsx\";\n\nconst AdvanceStep = (state, event, finalStep) => {\n  const step = state.intro.step + 1;\n\n  if (step === finalStep) {\n    return {\n      ...state,\n      view: \"map\",\n    };\n  }\n\n  return {\n    ...state,\n    intro: {\n      // prevent step from exceeding the finalStep\n      step: Math.min(step, finalStep),\n    },\n  };\n};\n\nconst Intro = ({ intro: { step } }) => {\n  const steps = [\n    <p className=\"animated flash\" style={{ opacity: 0 }}>\n      Your machine is connected to The Cloud, a system of interconnected servers\n      that speak with each other.\n    </p>,\n\n    <p className=\"animated flash\" style={{ opacity: 0 }}>\n      Normally, users of The Cloud are free to visit any server they wish but\n      something has gone wrong.\n    </p>,\n\n    <p className=\"animated flash\" style={{ opacity: 0 }}>\n      Many of the servers that should be working are responding with 404 Not\n      Found.\n    </p>,\n\n    <p className=\"animated flash\" style={{ opacity: 0 }}>\n      Attempt to establish a connection to these servers and return them to the\n      network (200 OK).\n    </p>,\n  ];\n\n  return (\n    <main onclick={(state, event) => AdvanceStep(state, event, steps.length)}>\n      {steps.slice(0, step + 1)}\n      <p className=\"\" style={{ opacity: 1 }}>\n        Press any key to{\" \"}\n        {step === steps.length - 1 ? (\n          <span class=\"flash animated\" style={{ animationDelay: \"750ms\" }}>\n            START\n          </span>\n        ) : (\n          \"continue\"\n        )}\n        ... <span class=\"flash animated infinite\">|</span>\n      </p>\n    </main>\n  );\n};\n\nexport default Intro;\n","const deepClone = (obj) => JSON.parse(JSON.stringify(obj));\n\nconst updateArray = (array, index, updater) => [\n  ...array.slice(0, index),\n  updater(array[index]),\n  ...array.slice(index + 1),\n];\n\nconst isUnitHeadAtLocation = (unit, [row, col]) =>\n  unit.tiles[0][0] === row && unit.tiles[0][1] === col;\n\nconst isUnitAtLocation = (unit, [row, col]) =>\n  unit.tiles.some((tile) => tile[0] === row && tile[1] === col);\n\nconst findUnitAtLocation = (units, location) =>\n  units.find((unit) => isUnitAtLocation(unit, location));\n\nconst findUnitIndexAtLocation = (units, location) =>\n  units.findIndex((unit) => isUnitAtLocation(unit, location));\n\nconst isLocationInBounds = (tiles, location) =>\n  location[0] >= 0 &&\n  location[1] >= 0 &&\n  location[0] < tiles.length &&\n  location[1] < tiles[0].length;\n\nconst getNeighborLocations = (tiles, location) => {\n  return [\n    [location[0] - 1, location[1]],\n    [location[0] + 1, location[1]],\n    [location[0], location[1] - 1],\n    [location[0], location[1] + 1],\n  ].filter((neighbor) => isLocationInBounds(tiles, neighbor));\n};\n\nconst getNeighbors = getNeighborLocations;\n\n// get array of locations in diamond around location where radius of diamond === magnitude\nconst getLocationsInArea = (tiles, location, magnitude) => {\n  const locations = [];\n\n  for (let m = 1; m <= magnitude; m++) {\n    locations.push(\n      [location[0] - m, location[1]],\n      [location[0] + m, location[1]],\n      [location[0], location[1] - m],\n      [location[0], location[1] + m]\n    );\n  }\n\n  return locations.filter((inAreaLocation) =>\n    isLocationInBounds(tiles, inAreaLocation)\n  );\n};\n\nconst getLocationsInDiamond = (tiles, location, magnitude) => {\n  const locations = [];\n\n  // get a triangle from top to bottom\n  // then stack another triangle upsidedown underneath it\n  // height of each triangle === magnitude\n\n  for (let depth = 0; depth <= magnitude; depth++) {\n    // top of diamond\n    locations.push([location[0] + (-magnitude + depth), location[1]]);\n    // bottom of diamond\n    locations.push([location[0] + (magnitude - depth), location[1]]);\n\n    if (depth === 0) {\n      // only add additional columns after the peak\n      continue;\n    }\n\n    for (let layerWidth = 1; layerWidth <= depth; layerWidth++) {\n      // top rows of diamond\n      locations.push(\n        [location[0] + (-magnitude + depth), location[1] + layerWidth],\n        [location[0] + (-magnitude + depth), location[1] - layerWidth]\n      );\n      //bottom rows of diamond\n      locations.push(\n        [location[0] + (magnitude - depth), location[1] + layerWidth],\n        [location[0] + (magnitude - depth), location[1] - layerWidth]\n      );\n    }\n  }\n\n  return locations.filter((inAreaLocation) =>\n    isLocationInBounds(tiles, inAreaLocation)\n  );\n};\n\nconst getLocationsInSquare = (tiles, location, magnitude) => {\n  const locations = [];\n\n  for (let rowAdjust = 0; rowAdjust <= magnitude; rowAdjust++) {\n    for (let colAdjust = 0; colAdjust <= magnitude; colAdjust++) {\n      locations.push(\n        [location[0] - rowAdjust, location[1] + colAdjust],\n        [location[0] + rowAdjust, location[1] + colAdjust],\n        [location[0] + rowAdjust, location[1] - colAdjust],\n        [location[0] - rowAdjust, location[1] - colAdjust]\n      );\n    }\n  }\n\n  return locations.filter((inAreaLocation) =>\n    isLocationInBounds(tiles, inAreaLocation)\n  );\n};\n\nfunction findAllIndices(array, comparator) {\n  const indices = [];\n\n  for (let i = 0; i < array.length; i = +1) {\n    if (comparator(array[i], i, array)) {\n      indexes.push(i);\n    }\n  }\n\n  return indices;\n}\n\nconst manhattanDistance = (a, b) => {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n};\n\nfunction pickRandomlyFromArray(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction getAllLocations(tiles) {\n  const locations = [];\n\n  tiles.forEach((row, rowIndex) =>\n    row.forEach((col, colIndex) => {\n      locations.push([rowIndex, colIndex]);\n    })\n  );\n\n  return locations;\n}\n\nexport {\n  deepClone,\n  updateArray,\n  isUnitHeadAtLocation,\n  isUnitAtLocation,\n  findUnitAtLocation,\n  findUnitIndexAtLocation,\n  isLocationInBounds,\n  getNeighbors,\n  getNeighborLocations,\n  findAllIndices,\n  manhattanDistance,\n  pickRandomlyFromArray,\n  getLocationsInArea,\n  getLocationsInDiamond,\n  getLocationsInSquare,\n  getAllLocations,\n};\n","import h from \"../hyperapp-jsx\";\n\nimport { isUnitAtLocation, getNeighborLocations } from \"../utils\";\n\nconst TILE_SIZE = 16;\n\nconst Sprite = ({\n  sheet,\n  icon: [row, col] = [],\n  color = \"white\",\n  bg = \"transparent\",\n  scale = 1,\n  onclick,\n  selected,\n  moveTarget,\n  attackTarget,\n  neighbors = [],\n  animation = {},\n  onanimationend,\n}) => {\n  return (\n    <div\n      class={`sprite${selected ? \" selected\" : \"\"}${\n        moveTarget ? \" move-target\" : \"\"\n      }${attackTarget ? \" attack-target\" : \"\"}${\n        animation.state === \"UNSTARTED\"\n          ? ` animated ${\n              animation.type === \"ADDED\" ? \"scale-in\" : \"scale-out\"\n            } fast`\n          : \"\"\n      }`}\n      style={{\n        width: `${TILE_SIZE * scale}px`,\n        height: `${TILE_SIZE * scale}px`,\n        backgroundColor:\n          animation.state === \"UNSTARTED\" && animation.type === \"REMOVED\"\n            ? animation.bg\n            : bg,\n        borderTop:\n          neighbors.some((neighbor) => neighbor[0] === -1) &&\n          !selected &&\n          !moveTarget &&\n          !attackTarget\n            ? \"2px solid transparent\"\n            : \"\",\n        borderBottom:\n          neighbors.some((neighbor) => neighbor[0] === 1) &&\n          !selected &&\n          !moveTarget &&\n          !attackTarget\n            ? \"2px solid transparent\"\n            : \"\",\n        borderRight:\n          neighbors.some((neighbor) => neighbor[1] === 1) &&\n          !selected &&\n          !moveTarget &&\n          !attackTarget\n            ? \"2px solid transparent\"\n            : \"\",\n        borderLeft:\n          neighbors.some((neighbor) => neighbor[1] === -1) &&\n          !selected &&\n          !moveTarget &&\n          !attackTarget\n            ? \"2px solid transparent\"\n            : \"\",\n      }}\n      onclick={onclick}\n      onanimationend={onanimationend}\n    >\n      {row !== undefined && (\n        <div\n          style={{\n            width: `${TILE_SIZE}px`,\n            height: `${TILE_SIZE}px`,\n            transform: `scale(${scale})`,\n            transformOrigin: \"top left\",\n            backgroundColor: color,\n            webkitMaskImage: `url(${sheet})`,\n            webkitMaskPosition: `-${col * TILE_SIZE}px -${row * TILE_SIZE}px`,\n            position: \"absolute\",\n          }}\n        ></div>\n      )}\n      {moveTarget && (\n        <div\n          style={{\n            width: `${TILE_SIZE}px`,\n            height: `${TILE_SIZE}px`,\n            transform: `scale(${scale})`,\n            transformOrigin: \"top left\",\n            backgroundColor: \"cyan\",\n            webkitMaskImage: `url(${sheet})`,\n            webkitMaskPosition: `-${4 * TILE_SIZE}px -${0 * TILE_SIZE}px`,\n            position: \"absolute\",\n          }}\n        ></div>\n      )}\n      {attackTarget && (\n        <div\n          style={{\n            width: `${TILE_SIZE}px`,\n            height: `${TILE_SIZE}px`,\n            transform: `scale(${scale})`,\n            transformOrigin: \"top left\",\n            backgroundColor: \"red\",\n            webkitMaskImage: `url(${sheet})`,\n            webkitMaskPosition: `-${5 * TILE_SIZE}px -${0 * TILE_SIZE}px`,\n            position: \"absolute\",\n          }}\n        ></div>\n      )}\n    </div>\n  );\n};\n\nconst Server = ({ sheet, icon, label, statusCode, onclick }) => {\n  const color = Math.floor(statusCode / 100) === 2 ? \"green\" : \"red\";\n\n  return (\n    <div class=\"server\" onclick={onclick}>\n      <Sprite sheet={sheet} icon={icon} scale={3} />\n      <p>{label}</p>\n      <p class=\"statusCode\">\n        <span class=\"flash animated infinite\" style={{ color }}>\n          ●{\" \"}\n        </span>{\" \"}\n        {statusCode}\n      </p>\n    </div>\n  );\n};\n\nconst Grid = ({ sheet, tiles, onTileClick, onAnimationEnd, selected }) => {\n  const scale = 3;\n  return (\n    <div\n      class=\"grid\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `${TILE_SIZE * scale + 16}px `.repeat(\n          tiles[0].length\n        ),\n        gridTemplateRows: `${TILE_SIZE * scale + 16}px `.repeat(tiles.length),\n      }}\n    >\n      {[].concat(\n        ...tiles.map((row, rowIndex) =>\n          row.map((tile, colIndex) => {\n            let animation = tile.animation;\n\n            if (tile.animation?.type === \"REMOVED\") {\n              // only remove tile if it's in removed\n              const isLocationRemoved = tile.animation.removedTiles.some(\n                (removed) => removed[0] === rowIndex && removed[1] === colIndex\n              );\n              if (!isLocationRemoved) {\n                animation = {};\n              }\n            }\n            if (tile.animation?.type === \"ADDED\") {\n              // only move tile if it's in moved\n              const isLocationMoved = tile.animation.movedTiles.some(\n                (moved) => moved[0] === rowIndex && moved[1] === colIndex\n              );\n              if (!isLocationMoved) {\n                animation = {};\n              }\n            }\n\n            return (\n              <Sprite\n                onclick={(state) => onTileClick(state, [rowIndex, colIndex])}\n                onanimationend={(state) =>\n                  onAnimationEnd(state, [rowIndex, colIndex])\n                }\n                sheet={sheet}\n                scale={scale}\n                selected={selected[0] === rowIndex && selected[1] === colIndex}\n                neighbors={getNeighborLocations(tiles, [rowIndex, colIndex])\n                  .filter((neighbor) => isUnitAtLocation(tile, neighbor))\n                  .map((location) => [\n                    location[0] - rowIndex,\n                    location[1] - colIndex,\n                  ])}\n                {...tile}\n                animation={animation}\n              />\n            );\n          })\n        )\n      )}\n    </div>\n  );\n};\n\nexport { Sprite, Server, Grid };\n","import h from \"../hyperapp-jsx\";\n\nimport tileSheet from \"../../assets/tiles.png\";\n\nimport { Server } from \"../components\";\n\nconst StartConnection = (state, index) => {\n  return {\n    ...state,\n    connection: {\n      ...state.connection,\n      serverIndex: index,\n    },\n    view: \"connection\",\n  };\n};\n\nconst Map = ({ map: { servers } }) => {\n  return (\n    <main>\n      <p>--- The Cloud -----------------------[x]---</p>\n      <div class=\"map\">\n        {servers.map((server, index) => (\n          <Server\n            sheet={tileSheet}\n            icon={server.icon}\n            label={server.name}\n            statusCode={server.statusCode}\n            onclick={(state) => StartConnection(state, index)}\n          />\n        ))}\n      </div>\n      <p>Click a server to attempt to establish a connection...</p>\n    </main>\n  );\n};\n\nexport default Map;\n","import h from \"../hyperapp-jsx\";\n\nimport { deepClone } from \"../utils\";\n\nconst StartBattle = (state, index) => {\n  return {\n    ...state,\n    connection: {\n      ...state.connection,\n      step: 0,\n    },\n    map: {\n      ...state.map,\n      selected: index,\n    },\n    battle: {\n      ...state.battle,\n      tiles: deepClone(state.map.servers[index].tiles),\n      units: deepClone(state.map.servers[index].units),\n    },\n    view: \"battle\",\n  };\n};\n\nconst AdvanceStep = (state, event, finalStep) => {\n  const step = state.connection.step + 1;\n\n  if (step === finalStep) {\n    return StartBattle(state, state.connection.serverIndex);\n  }\n\n  return {\n    ...state,\n    connection: {\n      ...state.connection,\n      // prevent step from exceeding the finalStep\n      step: Math.min(step, finalStep),\n    },\n  };\n};\n\nconst Connection = ({\n  map: { servers },\n  connection: { step, serverIndex },\n}) => {\n  const { name } = servers[serverIndex];\n\n  const steps = [\n    <p className=\"animated flash\" style={{ opacity: 0 }}>\n      Establishing connection to {name}....\n    </p>,\n    <p className=\"animated flash\" style={{ opacity: 0, color: \"red\" }}>\n      WARNING - Shield OS has detected hostile connection attempt. Deploying\n      virus control programs.\n    </p>,\n  ];\n\n  return (\n    <main onclick={(state, event) => AdvanceStep(state, event, steps.length)}>\n      {steps.slice(0, step + 1)}\n      <p className=\"\" style={{ opacity: 1 }}>\n        Press any key to{\" \"}\n        {step === steps.length - 1\n          ? \"HACK past the rogue virus control programs\"\n          : \"continue\"}\n        ... <span class=\"flash animated infinite\">|</span>\n      </p>\n    </main>\n  );\n};\n\nexport default Connection;\n","import h from \"../hyperapp-jsx\";\n\nimport tileSheet from \"../../assets/tiles.png\";\n\nimport { Sprite, Grid } from \"../components/index\";\nimport {\n  deepClone,\n  updateArray,\n  isUnitHeadAtLocation,\n  isUnitAtLocation,\n  findUnitAtLocation,\n  findUnitIndexAtLocation,\n  getNeighbors,\n  findAllIndices,\n  manhattanDistance,\n  pickRandomlyFromArray,\n  getLocationsInArea,\n  getLocationsInDiamond,\n  getLocationsInSquare,\n  getAllLocations,\n} from \"../utils\";\n\nconst SelectAbility = (state, index) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      selectedAction: index,\n    },\n  };\n};\n\nconst DeselectAbility = (state) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      selectedAction: -1,\n    },\n  };\n};\n\nconst ClickAbility = (state, index) => {\n  if (state.battle.selectedAction === index) {\n    return DeselectAbility(state);\n  } else {\n    return SelectAbility(state, index);\n  }\n};\n\nconst SelectUnit = (state, location) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      selected: location,\n    },\n  };\n};\n\nconst DeselectUnit = (state) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      selected: [],\n    },\n  };\n};\n\nconst isLocationValidMoveTarget = (\n  { units, tiles, selected, selectedAction },\n  location\n) => {\n  const neighbors = getNeighbors(tiles, location);\n  // is neighboring tile selected and a unit's head\n  const neighborUnitHead = units.find((unit) =>\n    isUnitHeadAtLocation(unit, selected)\n  );\n\n  return (\n    neighbors.some(\n      (neighbor) =>\n        selected[0] === neighbor[0] &&\n        selected[1] === neighbor[1] && // is selected tile a neighbor of this one\n        neighborUnitHead && // is the selected tile a unit head\n        !units.some((unit) => isUnitAtLocation(unit, location)) && // is the selected tile empty\n        neighborUnitHead.moves[0] > 0\n    ) && selectedAction === -1\n  );\n};\n\nconst isLocationValidAttackTarget = (\n  { units, tiles, selected, selectedAction },\n  location,\n  moves\n) => {\n  if (selectedAction === -1) {\n    return false;\n  }\n\n  const selectedUnit = findUnitAtLocation(units, selected);\n  const abilityKey = selectedUnit.abilities[selectedAction];\n  const ability = moves[abilityKey];\n\n  let inRangeLocations = [];\n\n  // Use switch(true) as a pattern matcher\n  //\n  switch (true) {\n    case ability.area.includes(\"cross\"):\n      {\n        const range = parseInt(ability.area.match(/cross(\\d+)/)[1]);\n        inRangeLocations = getLocationsInArea(tiles, location, range);\n      }\n      break;\n    case ability.area.includes(\"diamond\"):\n      {\n        const range = parseInt(ability.area.match(/diamond(\\d+)/)[1]);\n        inRangeLocations = getLocationsInDiamond(tiles, location, range);\n      }\n      break;\n    case ability.area.includes(\"square\"):\n      {\n        const range = parseInt(ability.area.match(/square(\\d+)/)[1]);\n        inRangeLocations = getLocationsInSquare(tiles, location, range);\n      }\n      break;\n    default:\n      break;\n  }\n\n  // is neighboring tile selected and a unit's head\n  return inRangeLocations.some(\n    (inRangeLocation) =>\n      selected[0] === inRangeLocation[0] &&\n      selected[1] === inRangeLocation[1] && // is selected tile in range of this one\n      units.some((unit) => isUnitHeadAtLocation(unit, selected)) // is the selected tile a unit head\n  );\n};\n\nconst MoveUnit = (state, selectedUnitIndex, location) => {\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      units: updateArray(state.battle.units, selectedUnitIndex, (unit) => {\n        if (unit.moves[0] === 0) {\n          // if we're out of moves, make no unit changes\n          return unit;\n        }\n\n        const tiles = [location, ...unit.tiles];\n\n        if (tiles.length > unit.size) {\n          tiles.pop();\n        }\n\n        return {\n          ...unit,\n          moves: [unit.moves[0] - 1, unit.moves[1]],\n          animation: {\n            type: \"ADDED\",\n            state: \"UNSTARTED\",\n            movedTiles: [location],\n          },\n          tiles,\n        };\n      }),\n      selected: location,\n    },\n  };\n};\n\nconst UseAbility = (state, selectedUnitIndex, location) => {\n  // if (selectedAction === 'hack') {\n  //\n  // }\n\n  const selectedUnit = state.battle.units[selectedUnitIndex];\n  const ability =\n    state.moves[selectedUnit.abilities[state.battle.selectedAction]];\n\n  if (selectedUnit.ap[0] === 0) {\n    // if we're out of ap, make no changes\n    return state;\n  }\n\n  // if no unit is there, don't do anything\n  const targetUnitIndex = state.battle.units.findIndex((unit) =>\n    isUnitAtLocation(unit, location)\n  );\n\n  if (targetUnitIndex === -1) {\n    return state;\n  }\n\n  const apUpdatedState = updateArray(\n    state.battle.units,\n    selectedUnitIndex,\n    (unit) => {\n      return {\n        ...unit,\n        ap: [unit.ap[0] - 1, unit.ap[1]],\n      };\n    }\n  );\n\n  const damagedEnemyUnit = updateArray(\n    apUpdatedState,\n    targetUnitIndex,\n    (unit) => {\n      return {\n        ...unit,\n        animation: {\n          type: \"REMOVED\",\n          state: \"UNSTARTED\",\n          bg: unit.bg,\n          removedTiles: unit.tiles.slice(unit.tiles.length - ability.power),\n        },\n      };\n    }\n  );\n\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      units: damagedEnemyUnit,\n      selectedAction: -1,\n    },\n  };\n};\n\nconst ClickTile = (state, location) => {\n  const deselectedAbilityState = DeselectAbility(state);\n  const selectedUnitIndex = state.battle.units.findIndex((unit) =>\n    isUnitHeadAtLocation(unit, state.battle.selected)\n  );\n  const selectedUnit = state.battle.units[selectedUnitIndex];\n\n  if (\n    state.battle.selected[0] === location[0] &&\n    state.battle.selected[1] === location[1]\n  ) {\n    return DeselectUnit(deselectedAbilityState);\n  } else if (\n    state.battle.selected.length === 2 &&\n    state.battle.selectedAction === -1 &&\n    isLocationValidMoveTarget(state.battle, location) &&\n    selectedUnit.owner === 0 // only let player move own units\n  ) {\n    // move action\n    return MoveUnit(state, selectedUnitIndex, location);\n  } else if (\n    state.battle.selected.length === 2 &&\n    state.battle.selectedAction !== -1 &&\n    isLocationValidAttackTarget(state.battle, location, state.moves) &&\n    selectedUnit.owner === 0 // only let player use action of own units\n  ) {\n    // ability action\n    return UseAbility(state, selectedUnitIndex, location);\n  } else {\n    return SelectUnit(deselectedAbilityState, location);\n  }\n};\n\nconst FinishAnimation = (state, location) => {\n  const unitIndex = findUnitIndexAtLocation(state.battle.units, location);\n\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      units: updateArray(state.battle.units, unitIndex, (unit) => {\n        const isLocationRemoved = unit.animation.removedTiles?.some(\n          (removed) => removed[0] === location[0] && removed[1] === location[1]\n        );\n\n        const removedLocationIndex = unit.tiles.findIndex(\n          (tile) => tile[0] === location[0] && tile[1] === location[1]\n        );\n        const tiles =\n          unit.animation.type === \"REMOVED\" && isLocationRemoved\n            ? [\n                ...unit.tiles.slice(0, removedLocationIndex),\n                ...unit.tiles.slice(removedLocationIndex + 1),\n              ] // unit.tiles.slice(0, unit.tiles.length - unit.animation.amount)\n            : unit.tiles;\n\n        return {\n          ...unit,\n          tiles: tiles.length > 0 ? tiles : [[]],\n          animation: { ...unit.animation, state: \"COMPLETED\" },\n        };\n      }),\n    },\n  };\n};\n\nconst EndTurn = (state) => {\n  // is every unit either player owned OR is dead ( this is what empty program looks like: [[]] )\n  if (\n    state.battle.units.every(\n      (unit) => unit.owner === 0 || unit.tiles[0].length === 0\n    )\n  ) {\n    // mark server as complete, and return to map\n    return {\n      ...state,\n      view: \"map\",\n      map: {\n        ...state.map,\n        servers: updateArray(\n          state.map.servers,\n          state.map.selected,\n          (server) => ({\n            ...server,\n            statusCode: 200,\n          })\n        ),\n      },\n    };\n  }\n\n  // perform enemy actions\n  const isNotActedEnemyUnit = (unit) => !unit.acted && unit.owner !== 0;\n\n  let newState = deepClone(state);\n\n  state.battle.units.forEach((unit) => {\n    // re-calculate index instead of pulling it out of the for loop since\n    // units can be destroyed from array\n    const index = newState.battle.units.findIndex(\n      (target) =>\n        target.tiles[0][0] === unit.tiles[0][0] &&\n        target.tiles[0][1] === unit.tiles[0][1]\n    );\n\n    if (isNotActedEnemyUnit(unit)) {\n      // find x and y distance to nearest player unit\n      // const playerUnitDistances = state.battle.units\n      //   .map((unit, index) => [manhattanDistance(), unit, index])\n      //   .filter((unit) => unit.owner === 0);\n      // const nearestPlayerUnit = {};\n      // move x or y toward nearest player unit\n      // recurse until moves are 0\n      // is neighboring player unit?\n      // use ability on player unit\n\n      let neighbors;\n      newState = SelectUnit(newState, newState.battle.units[index].tiles[0]);\n\n      while (newState.battle.units[index].moves[0] > 0) {\n        newState = SelectUnit(newState, newState.battle.units[index].tiles[0]);\n\n        neighbors = getNeighbors(\n          newState.battle.tiles,\n          newState.battle.units[index].tiles[0]\n        );\n\n        const moveOptions = neighbors.filter((neighbor) =>\n          isLocationValidMoveTarget(newState.battle, neighbor)\n        );\n\n        const playerUnitTiles = newState.battle.units\n          .filter((unit) => unit.owner === 0)\n          .map((unit) => unit.tiles)\n          .reduce((allTiles, unitTiles) => [...allTiles, ...unitTiles], []);\n\n        const findNearestOption = (location, options) => {\n          let smallestDistance = Infinity;\n          let bestOption = [];\n\n          options.forEach((option) => {\n            const distance = manhattanDistance(location, option);\n\n            if (distance < smallestDistance) {\n              smallestDistance = distance;\n              bestOption = option;\n            }\n          });\n\n          return [smallestDistance, bestOption];\n        };\n\n        let smallestDistance = Infinity;\n        let bestMoveOption = [];\n\n        moveOptions.forEach((moveOption) => {\n          const [\n            optionDistanceFromPlayer,\n            nearestPlayerTile,\n          ] = findNearestOption(moveOption, playerUnitTiles);\n\n          if (optionDistanceFromPlayer < smallestDistance) {\n            smallestDistance = optionDistanceFromPlayer;\n            bestMoveOption = moveOption;\n          }\n        });\n\n        if (moveOptions.length > 0) {\n          newState = MoveUnit(\n            newState,\n            index,\n            bestMoveOption // pickRandomlyFromArray(moveOptions)\n          );\n        } else {\n          break;\n        }\n      }\n\n      // hard code to always pick first AI ability\n      newState = SelectAbility(newState, 0);\n\n      const attackOptions = getAllLocations(newState.battle.tiles)\n        .filter((neighbor) =>\n          // filter out any neighbors without units on them\n          newState.battle.units.some((unit) => isUnitAtLocation(unit, neighbor))\n        )\n        .filter((neighbor) =>\n          // this may already be validated in our scenario\n          isLocationValidAttackTarget(newState.battle, neighbor, newState.moves)\n        )\n        // filter out non-player unis to prevent firendly AI fire\n        // check if any option is contained in a the tiles of a non-player unit\n        .filter(\n          (option) =>\n            newState.battle.units.find((unit) =>\n              unit.tiles.some(\n                (tile) => tile[0] === option[0] && tile[1] === option[1]\n              )\n            ).owner === 0\n        );\n\n      if (attackOptions.length > 0) {\n        newState = UseAbility(\n          newState,\n          index,\n          pickRandomlyFromArray(attackOptions)\n        );\n      }\n\n      newState = DeselectAbility(newState);\n      newState = DeselectUnit(newState);\n    }\n  });\n\n  // if all player units are dead, declare defeat\n  if (\n    state.battle.units.every(\n      (unit) => unit.owner !== 0 || unit.tiles[0].length === 0\n    )\n  ) {\n    // mark server as complete, and return to map\n    return {\n      ...state,\n      view: \"map\",\n    };\n  }\n\n  // reset units\n  const units = newState.battle.units.map((unit) => ({\n    ...unit,\n    moves: [unit.moves[1], unit.moves[1]],\n    ap: [unit.ap[1], unit.ap[1]],\n    acted: false,\n  }));\n\n  return {\n    ...state,\n    battle: {\n      ...state.battle,\n      turn: state.battle.turn + 1,\n      units,\n    },\n  };\n};\n\nconst UnitInfo = ({\n  unit: {\n    name = \"NONE SELECTED\",\n    icon = [0, 3],\n    size = undefined,\n    ap = [],\n    abilities = [],\n    moves = [],\n    tiles = [],\n  },\n}) => {\n  const header = `--[ ${name} ]--`;\n  const HR = () => <p>{\"-\".repeat(header.length)}</p>;\n\n  return (\n    <div class=\"unit-info\">\n      <p>{header}</p>\n      <Sprite sheet={tileSheet} icon={icon} scale={3} />\n      <p>{`Size: ${tiles.length ?? \"?\"}/${size ?? \"?\"}`}</p>\n      <p>{`Moves: ${moves[0] ?? \"?\"}/${moves[1] ?? \"?\"}`}</p>\n      <p>{`Actions: ${ap[0] ?? \"?\"}/${ap[1] ?? \"?\"}`}</p>\n      <HR />\n      <ul>\n        {abilities.map((ability, index) => (\n          <li\n            onclick={(state) => ClickAbility(state, index)}\n            class={ability.selected && \"selected\"}\n          >{`${ability.key} - ${ability.power}`}</li>\n        ))}\n      </ul>\n      <HR />\n    </div>\n  );\n};\n\nconst Battle = ({\n  battle: { tiles, selected, units, selectedAction, turn },\n  moves,\n}) => {\n  const selectedInfo =\n    tiles[selected[0]] &&\n    units.find((unit) => isUnitHeadAtLocation(unit, selected));\n\n  return (\n    <main>\n      <div class=\"battle-map\">\n        <Grid\n          sheet={tileSheet}\n          tiles={tiles.map((row, rowIndex) =>\n            row.map((tile, colIndex) => {\n              if (tile === null) {\n                tile = {\n                  name: undefined,\n                  icon: undefined,\n                  size: undefined,\n                  abilities: [],\n                  moves: [],\n                  tiles: [],\n                };\n              }\n\n              const moveTarget = isLocationValidMoveTarget(\n                { tiles, selected, units, selectedAction },\n                [rowIndex, colIndex]\n              );\n              const attackTarget = isLocationValidAttackTarget(\n                { tiles, selected, units, selectedAction },\n                [rowIndex, colIndex],\n                moves\n              );\n\n              const unitHead = units.find((unit) =>\n                isUnitHeadAtLocation(unit, [rowIndex, colIndex])\n              );\n              if (unitHead) {\n                return {\n                  ...unitHead,\n                  attackTarget,\n                };\n              }\n\n              const unitPiece = units.find((unit) =>\n                isUnitAtLocation(unit, [rowIndex, colIndex])\n              );\n              if (unitPiece) {\n                return {\n                  ...unitPiece,\n                  icon: [],\n                  attackTarget,\n                };\n              }\n\n              return {\n                ...tile,\n                moveTarget,\n                attackTarget,\n              };\n            })\n          )}\n          onTileClick={ClickTile}\n          onAnimationEnd={FinishAnimation}\n          selected={selected}\n        />\n      </div>\n      <UnitInfo\n        unit={\n          selectedInfo\n            ? {\n                ...selectedInfo,\n                abilities: selectedInfo.abilities.map((ability, index) => ({\n                  ...moves[ability],\n                  selected: selectedAction === index,\n                })),\n              }\n            : {}\n        }\n      />\n      <p>Turn: {turn + 1}</p>\n      <button onclick={EndTurn}>End Turn</button>\n      {units.every((unit) => unit.owner !== 0 || unit.tiles[0].length === 0) ? (\n        // if defeat is true\n        <p>\n          <span style={{ color: \"red\" }}>Connection attempt FAILED!</span> This\n          server is still <span style={{ color: \"red\" }}>404 Not Found</span>.\n          Try hacking again to retry hack battle.\n        </p>\n      ) : units.every(\n          (unit) => unit.owner === 0 || unit.tiles[0].length === 0\n        ) ? (\n        // if success is true\n        <p>\n          <span style={{ color: \"green\" }}>Connection attempt SUCCEEDED!</span>{\" \"}\n          This server is now <span style={{ color: \"green\" }}>200 OK</span>.\n          Connection to The Cloud has been re-established.\n        </p>\n      ) : (\n        // default text\n        <p>\n          Destroy the enemy programs to re-establish connection between this\n          server and The Cloud.\n        </p>\n      )}\n    </main>\n  );\n};\n\nexport default Battle;\n","import h from \"../hyperapp-jsx\";\n\nimport Main from \"./main\";\nimport Intro from \"./intro\";\nimport Map from \"./map\";\nimport Connection from \"./connection\";\nimport Battle from \"./battle\";\n\nconst views = {\n  main: Main,\n  intro: Intro,\n  map: Map,\n  connection: Connection,\n  battle: Battle,\n};\n\nexport { views };\n","module.exports = `127.0.0.1\n0 0\n. . . . . . .\n. s h p . . .\n. . . . . f .\n. . . . . . .\n. t . x e . .\n. . . . . . .`","module.exports = `com.google\n0 0\n. . . . .\n. . h . .\n. . . . .\n. . . . .\n. x . x .\n. . . . .`","module.exports = `127.0.0.1\n0 0\n. . . . .\n. h . . .\n. . . . .\n. . . . .\n. . . d .\n. . . . .`","import level1 from \"../assets/level1.txt\";\nimport level2 from \"../assets/level2.txt\";\nimport level3 from \"../assets/level3.txt\";\n\nconst parse = (level) => {\n  const lines = level.split(\"\\n\");\n  const icon = lines[1].split(\" \");\n  const units = [];\n  const tiles = lines.slice(2).map((row, rowIndex) =>\n    row.split(\" \").map((char, colIndex) => {\n      switch (char) {\n        case \"h\":\n          units.push({\n            icon: [0, 1],\n            bg: \"#5454ff\",\n            name: \"HACK.slsh\",\n            size: 4,\n            abilities: [\"hack\"],\n            moves: [2, 2],\n            ap: [1, 1],\n            owner: 0,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"x\":\n          units.push({\n            icon: [0, 2],\n            bg: \"#ff5454\",\n            name: \"GUARD_AV\",\n            size: 3,\n            abilities: [\"bash\"],\n            moves: [1, 1],\n            ap: [1, 1],\n            owner: 1,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"f\":\n          units.push({\n            icon: [0, 6],\n            bg: \"#ff5454\",\n            name: \"FIREWALL\",\n            size: 10,\n            abilities: [\"bash\"],\n            moves: [3, 3],\n            ap: [1, 1],\n            owner: 1,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"t\":\n          units.push({\n            icon: [1, 0],\n            bg: \"#ff5454\",\n            name: \"TRASH\",\n            size: 3,\n            abilities: [\"empty\"],\n            moves: [2, 2],\n            ap: [1, 1],\n            owner: 1,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"p\":\n          units.push({\n            icon: [0, 9],\n            bg: \"#5454ff\",\n            name: \"PING\",\n            size: 3,\n            abilities: [\"ping\"],\n            moves: [1, 1],\n            ap: [1, 1],\n            owner: 0,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"s\":\n          units.push({\n            icon: [1, 4],\n            bg: \"#5454ff\",\n            name: \"SLING\",\n            size: 3,\n            abilities: [\"sling\"],\n            moves: [1, 1],\n            ap: [1, 1],\n            owner: 0,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"e\":\n          units.push({\n            icon: [1, 6],\n            bg: \"#ff5454\",\n            name: \"SENTRY\",\n            size: 1,\n            abilities: [\"peek\"],\n            moves: [0, 0],\n            ap: [1, 1],\n            owner: 1,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        case \"d\":\n          units.push({\n            icon: [1, 7],\n            bg: \"#ff5454\",\n            name: \"DUD\",\n            size: 1,\n            abilities: [\"sputter\"],\n            moves: [0, 0],\n            ap: [1, 1],\n            owner: 1,\n            tiles: [[rowIndex, colIndex]],\n            animation: {},\n          });\n          break;\n        default:\n          break;\n      }\n\n      return undefined;\n    })\n  );\n\n  return {\n    name: lines[0],\n    icon,\n    tiles,\n    units,\n  };\n};\n\nexport default [parse(level3), parse(level1), parse(level2)];\n","module.exports = `hack 2 cross1\nbash 1 cross1\nempty 2 cross1\nsling 2 cross3\nping 1 diamond2\npeek 1 diamond3\nsputter 0 cross1`","import movesData from \"../assets/moves.txt\";\n\nconst moves = {};\n\nmovesData.split(\"\\n\").forEach((line) => {\n  const [key, power, area] = line.split(\" \");\n\n  moves[key] = { key, power, area };\n});\n\nexport default moves;\n"]}