{"id":"../../node_modules/ramda/es/always.js","dependencies":[{"name":"/Users/ryankubik/git/playground/hyperapp2-test/package.json","includedInParent":true,"mtime":1598205226168},{"name":"/Users/ryankubik/git/playground/hyperapp2-test/.babelrc","includedInParent":true,"mtime":1597523022671},{"name":"/Users/ryankubik/git/playground/node_modules/ramda/package.json","includedInParent":true,"mtime":1595832489236},{"name":"./internal/_curry1.js","loc":{"line":1,"column":20},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/always.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/internal/_curry1.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/(0, _curry.default)(function always(val) {\n  return function () {\n    return val;\n  };\n});\nvar _default = always;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":3,"column":0}},{"generated":{"line":31,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":0}},{"name":"always","generated":{"line":31,"column":4},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":4}},{"generated":{"line":31,"column":10},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":10}},{"generated":{"line":31,"column":13},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":13}},{"generated":{"line":31,"column":26},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":26}},{"generated":{"line":31,"column":46},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":34}},{"name":"always","generated":{"line":31,"column":55},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":43}},{"generated":{"line":31,"column":61},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":34}},{"name":"val","generated":{"line":31,"column":62},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":50}},{"generated":{"line":31,"column":65},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":34}},{"generated":{"line":31,"column":67},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":55}},{"generated":{"line":32,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":23,"column":2}},{"generated":{"line":32,"column":9},"source":"../../node_modules/ramda/es/always.js","original":{"line":23,"column":9}},{"generated":{"line":32,"column":21},"source":"../../node_modules/ramda/es/always.js","original":{"line":23,"column":21}},{"generated":{"line":33,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":24,"column":4}},{"name":"val","generated":{"line":33,"column":11},"source":"../../node_modules/ramda/es/always.js","original":{"line":24,"column":11}},{"generated":{"line":33,"column":14},"source":"../../node_modules/ramda/es/always.js","original":{"line":24,"column":4}},{"generated":{"line":34,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":25,"column":3}},{"generated":{"line":34,"column":3},"source":"../../node_modules/ramda/es/always.js","original":{"line":23,"column":2}},{"generated":{"line":35,"column":0},"source":"../../node_modules/ramda/es/always.js","original":{"line":26,"column":1}},{"generated":{"line":35,"column":1},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":26}},{"generated":{"line":35,"column":2},"source":"../../node_modules/ramda/es/always.js","original":{"line":22,"column":0}},{"name":"always","generated":{"line":36,"column":15},"source":"../../node_modules/ramda/es/always.js","original":{"line":27,"column":15}}],"sources":{"../../node_modules/ramda/es/always.js":"import _curry1 from './internal/_curry1.js';\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;"},"lineCount":null}},"error":null,"hash":"905cbb893d162162c059d57d7cf97f9a","cacheData":{"env":{}}}