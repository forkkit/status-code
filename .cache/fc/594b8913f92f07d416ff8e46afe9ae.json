{"id":"../../node_modules/ramda/es/aperture.js","dependencies":[{"name":"/Users/ryankubik/git/playground/hyperapp2-test/package.json","includedInParent":true,"mtime":1598205226168},{"name":"/Users/ryankubik/git/playground/hyperapp2-test/.babelrc","includedInParent":true,"mtime":1597523022671},{"name":"/Users/ryankubik/git/playground/node_modules/ramda/package.json","includedInParent":true,"mtime":1595832489236},{"name":"./internal/_aperture.js","loc":{"line":1,"column":22},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/aperture.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/internal/_aperture.js"},{"name":"./internal/_curry2.js","loc":{"line":2,"column":20},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/aperture.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/internal/_curry2.js"},{"name":"./internal/_dispatchable.js","loc":{"line":3,"column":26},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/aperture.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/internal/_dispatchable.js"},{"name":"./internal/_xaperture.js","loc":{"line":4,"column":23},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/aperture.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/internal/_xaperture.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _aperture2 = _interopRequireDefault(require(\"./internal/_aperture.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _dispatchable2 = _interopRequireDefault(require(\"./internal/_dispatchable.js\"));\n\nvar _xaperture2 = _interopRequireDefault(require(\"./internal/_xaperture.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/(0, _curry.default)( /*#__PURE__*/(0, _dispatchable2.default)([], _xaperture2.default, _aperture2.default));\nvar _default = aperture;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":4,"column":0}},{"generated":{"line":18,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":6,"column":0}},{"generated":{"line":39,"column":0},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":39,"column":4},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":4}},{"generated":{"line":39,"column":12},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":12}},{"generated":{"line":39,"column":15},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":15}},{"generated":{"line":39,"column":28},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":28}},{"generated":{"line":39,"column":49},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":37}},{"generated":{"line":39,"column":62},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"generated":{"line":39,"column":90},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":64}},{"generated":{"line":39,"column":92},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"name":"_xaperture","generated":{"line":39,"column":94},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":68}},{"generated":{"line":39,"column":113},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"name":"_aperture","generated":{"line":39,"column":115},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":80}},{"generated":{"line":39,"column":133},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":50}},{"generated":{"line":39,"column":134},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":28}},{"generated":{"line":39,"column":135},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":27,"column":0}},{"name":"aperture","generated":{"line":40,"column":15},"source":"../../node_modules/ramda/es/aperture.js","original":{"line":28,"column":15}}],"sources":{"../../node_modules/ramda/es/aperture.js":"import _aperture from './internal/_aperture.js';\nimport _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xaperture from './internal/_xaperture.js';\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\nexport default aperture;"},"lineCount":null}},"error":null,"hash":"d758ea832aac11a977e39c1600fe57b9","cacheData":{"env":{}}}