{"id":"CFte","dependencies":[{"name":"/Users/ryankubik/git/playground/hyperapp2-test/package.json","includedInParent":true,"mtime":1598205226168},{"name":"/Users/ryankubik/git/playground/hyperapp2-test/.babelrc","includedInParent":true,"mtime":1597523022671},{"name":"/Users/ryankubik/git/playground/node_modules/ramda/package.json","includedInParent":true,"mtime":1595832489236},{"name":"./pipeP.js","loc":{"line":1,"column":18},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/composeP.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/pipeP.js"},{"name":"./reverse.js","loc":{"line":2,"column":20},"parent":"/Users/ryankubik/git/playground/node_modules/ramda/es/composeP.js","resolved":"/Users/ryankubik/git/playground/node_modules/ramda/es/reverse.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=u;var e=t(require(\"./pipeP.js\")),r=t(require(\"./reverse.js\"));function t(e){return e&&e.__esModule?e:{default:e}}function u(){if(0===arguments.length)throw new Error(\"composeP requires at least one argument\");return e.default.apply(this,(0,r.default)(arguments))}"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":0}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":13}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":20}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":35}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":43}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":56}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":57}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":64}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":68}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":76}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":84}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":86}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":90}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":92}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":94}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":1,"column":0},"generated":{"line":1,"column":102}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":117}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":119}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":121}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":2,"column":0},"generated":{"line":1,"column":129}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":146}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":155}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":157}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":160}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":167}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":170}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":172}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":183}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":185}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":186}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":44,"column":1},"generated":{"line":1,"column":194}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":39,"column":15},"generated":{"line":1,"column":197}},{"source":"../../node_modules/ramda/es/composeP.js","name":"composeP","original":{"line":39,"column":24},"generated":{"line":1,"column":206}},{"source":"../../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":40,"column":6},"generated":{"line":1,"column":210}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":40,"column":27},"generated":{"line":1,"column":213}},{"source":"../../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":40,"column":6},"generated":{"line":1,"column":217}},{"source":"../../node_modules/ramda/es/composeP.js","name":"length","original":{"line":40,"column":16},"generated":{"line":1,"column":227}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":41,"column":10},"generated":{"line":1,"column":234}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":41,"column":10},"generated":{"line":1,"column":240}},{"source":"../../node_modules/ramda/es/composeP.js","name":"Error","original":{"line":41,"column":14},"generated":{"line":1,"column":244}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":41,"column":20},"generated":{"line":1,"column":250}},{"source":"../../node_modules/ramda/es/composeP.js","name":"pipeP","original":{"line":43,"column":9},"generated":{"line":1,"column":293}},{"source":"../../node_modules/ramda/es/composeP.js","name":"pipeP","original":{"line":43,"column":9},"generated":{"line":1,"column":300}},{"source":"../../node_modules/ramda/es/composeP.js","name":"apply","original":{"line":43,"column":15},"generated":{"line":1,"column":302}},{"source":"../../node_modules/ramda/es/composeP.js","name":"apply","original":{"line":43,"column":15},"generated":{"line":1,"column":310}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":43,"column":21},"generated":{"line":1,"column":316}},{"source":"../../node_modules/ramda/es/composeP.js","original":{"line":43,"column":27},"generated":{"line":1,"column":322}},{"source":"../../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":43,"column":35},"generated":{"line":1,"column":324}},{"source":"../../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":43,"column":35},"generated":{"line":1,"column":326}},{"source":"../../node_modules/ramda/es/composeP.js","name":"arguments","original":{"line":43,"column":35},"generated":{"line":1,"column":335}}],"sources":{"../../node_modules/ramda/es/composeP.js":"import pipeP from './pipeP.js';\nimport reverse from './reverse.js';\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @deprecated since v0.26.0\n * @example\n *\n *      const db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      const lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      const lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      const followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}"},"lineCount":null}},"error":null,"hash":"ec05302e426077d66f67199ec751212f","cacheData":{"env":{}}}